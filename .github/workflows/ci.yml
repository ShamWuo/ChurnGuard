name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      NODE_OPTIONS: --max_old_space_size=4096
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build
        run: npm run build

      - name: Start server
        run: |
          npm run start &
          echo "Started web server"

      - name: Wait for /api/ready
        run: |
          for i in {1..30}; do
            if curl -sSf http://localhost:3000/api/ready >/dev/null 2>&1; then echo ready && exit 0; fi
            sleep 1
          done
          echo "Server did not become ready"; exit 1

      - name: Smoke check
        run: node scripts/smoke-ready.js http://localhost:3000/api/ready 5000

      - name: Typecheck
        run: npx tsc --noEmit

      - name: Run unit tests
        run: npm test

      - name: Run recovered tests (fast check)
        run: npm run test:recovered

      - name: Run Playwright e2e (billing gated)
        if: ${{ secrets.STRIPE_SECRET || secrets.STRIPE_API_KEY }}
        uses: microsoft/playwright-github-action@v1
        with:
          run: |
            npx playwright test --config=playwright.config.ts --project=chromium
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: CI

    on:
      push:
        branches: [ main ]
      pull_request:
        branches: [ main ]

    jobs:
      test:
        runs-on: ubuntu-latest
        services:
          postgres:
            image: postgres:15
            env:
              POSTGRES_USER: postgres
              POSTGRES_PASSWORD: postgres
              POSTGRES_DB: testdb
            ports: ['5432:5432']
            options: >-
              --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
          redis:
            image: redis:7-alpine
            ports: ['6379:6379']
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/testdb?schema=public
          ADMIN_SECRET: test_admin_secret
          CSRF_SECRET: test_csrf_secret
          NEXT_TELEMETRY_DISABLED: '1'
        steps:
          - uses: actions/checkout@v4

          - name: Use Node.js
            uses: actions/setup-node@v4
            with:
              node-version: '20'

          - name: Install system libraries (for Prisma native engines)
            run: |
              sudo apt-get update -y
              sudo apt-get install -y build-essential pkg-config libssl-dev ca-certificates postgresql-client
              # On some runners libpq-dev may be required for Postgres native bindings
              sudo apt-get install -y libpq-dev || true

          - name: Install dependencies
            run: npm ci

          - name: Wait for Postgres
            run: |
              for i in {1..20}; do
                if pg_isready -h localhost -p 5432 -U postgres; then
                  echo "Postgres ready"; break
                fi
                echo "Waiting for Postgres..."; sleep 3
              done

          - name: Generate Prisma client
            run: npx prisma generate

          - name: Run migrations (deploy or push)
            run: |
              set -o pipefail
              npx prisma migrate deploy || npx prisma db push

          - name: Run unit tests
            run: npm test --silent

          - name: Precompile templates
            run: npm run precompile-templates || true

          - name: Build app
            run: npm run build --if-present

          - name: Start Next.js app
            run: |
              PORT=3000 npm run start &
              # wait for the readiness endpoint
              for i in {1..30}; do
                STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/ready || true)
                echo "ready status: $STATUS"
                if [ "$STATUS" = "200" ]; then
                  echo "App ready"; break
                fi
                sleep 2
              done

          - name: Install Playwright browsers and deps
            run: npx playwright install --with-deps || true

          - name: Run Playwright smoke tests
            run: npx playwright test --config=playwright.config.ts --grep @smoke || true
    steps:
